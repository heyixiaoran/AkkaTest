system{
	name: "actor-system"
}

akka {  
    actor {
        provider = cluster

		serializers {
			redis-msgpack = "Actors.Serialization.MsgPackSerializer, Actors"
			persistence-snapshot = "Akka.Persistence.Redis.Serialization.PersistentSnapshotSerializer, Akka.Persistence.Redis"
        }
        
		serialization-bindings {
			"Akka.Persistence.IPersistentRepresentation, Akka.Persistence" = redis-msgpack
			"Actors.Serialization.Stored, Actors" = redis-msgpack
			"Akka.Persistence.SelectedSnapshot, Akka.Persistence" = persistence-snapshot
        }

		serialization-identifiers {
            "Akka.Persistence.Redis.Serialization.PersistentSnapshotSerializer, Akka.Persistence.Redis" = 48
        }
	}

    remote {
        dot-netty.tcp {
			public-hostname = "127.0.0.1"
			hostname = "127.0.0.1"
			port = 0
        }
    }

	suppress-json-serializer-warning = true

	persistence {
		publish-plugin-commands = on
        journal {
			plugin = "akka.persistence.journal.redis"
			redis {
			    class = "Akka.Persistence.Redis.Journal.RedisJournal, Akka.Persistence.Redis"
			    plugin-dispatcher = "akka.actor.default-dispatcher"
				configuration-string = "127.0.0.1:6379"
				database = 15
			}
		}

		snapshot-store {
			plugin = "akka.persistence.snapshot-store.redis"
			redis {
                class = "Akka.Persistence.Redis.Snapshot.RedisSnapshotStore, Akka.Persistence.Redis"
				plugin-dispatcher = "akka.actor.default-dispatcher"
                configuration-string = "127.0.0.1:6379"
                database = 15
            }
		}

		query {
			journal {
				redis {
					class = "Akka.Persistence.Redis.Query.RedisReadJournalProvider, Akka.Persistence.Redis"
					max-buffer-size = 100
				}
			}
		}
    }

    cluster {
		auto-down-unreachable-after = 10s
        roles = [ "sharded-node", "pubsub-node" ]
		seed-nodes = ["akka.tcp://actor-system@127.0.0.1:2550"]

        pub-sub {
            role = "pubsub-node"
        }

		split-brain-resolver {
  			active-strategy = keep-majority
			stable-after = 30s 
		}
		down-removal-margin = 30s

		sharding {
            least-shard-allocation-strategy.rebalance-threshold = 3
        }
    }
}